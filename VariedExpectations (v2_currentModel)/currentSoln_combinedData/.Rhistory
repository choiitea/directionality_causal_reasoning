library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(plyr)
library(dplyr)
library(lattice)
library(openxlsx)
library(sjPlot)
library(xtable)
library(ggforce)
options(scipen=9999)
######################
# data preprocessing #
######################
# load data
D = read.csv(file.choose(), header = TRUE)
# get the structure of the data
str(D)
# create a test_choice variable
D$test_choice = rep(0,nrow(D))
for(i in 1:nrow(D)){
if(D$test_activity_correct[i]>0.5 && D$test_activity_incorrect[i]<0.5){
D$test_choice[i] = 1
}else{
D$test_choice[i] = 0
}
}
# create a test_choice variable
D$test_choice = rep(0,nrow(D))
for(i in 1:nrow(D)){
if(D$test_activity_correct[i]>0.5 && D$test_activity_incorrect[i]<0.5){
D$test_choice[i] = "Correct"
}else{
D$test_choice[i] = "Incorrect"
}
}
## create a direction_choice_lib variable ##
D$direction_choice_lib = rep(0, nrow(D))
for(i in 1:nrow(D)){
if(D$direction_activity_SOCconsistent[i]>0.5 && D$direction_activity_inverse[i]<0.5){
D$direction_choice_lib[i] = 1 #soc-consistent / order-consistent
}else if(D$direction_activity_SOCconsistent[i]>0.5 && D$direction_activity_inverse[i]>0.5){
D$direction_choice_lib[i] = 0
}else if(D$direction_activity_SOCconsistent[i]<0.5 && D$direction_activity_inverse[i]>0.5){
D$direction_choice_lib[i] = 0 #chose inverse but not soc_con
}else{
D$direction_choice_lib[i] = 0 #neither
}
}
# name the levels of direction_choice_lib
D$direction_choice_lib = revalue(x = as.factor(D$direction_choice_lib),
c("0" = "Other", "1"="Order Consistent"))
# get the distribution of "order consistent" and "other" choices
# for the Direction test trial
table(D$direction_choice_lib)
# get the distribution of "order consistent" and "other" choices
# for the Direction test trial
table(D$model_type, D$direction_choice_lib)
## create a direction_choice_conserv variable ##
D$direction_choice_conserv = rep(0, nrow(D))
for(i in 1:nrow(D)){
if(D$direction_activity_SOCconsistent[i]>0.5 && D$direction_activity_inverse[i]<0.5){
D$direction_choice_conserv[i] = 1 #soc-consistent / order-consistent
}else if(D$direction_activity_SOCconsistent[i]>0.5 && D$direction_activity_inverse[i]>0.5){
D$direction_choice_conserv[i] = 0
}else if(D$direction_activity_SOCconsistent[i]<0.5 && D$direction_activity_inverse[i]>0.5){
D$direction_choice_conserv[i] = 2 #chose inverse but not soc_con
}else{
D$direction_choice_conserv[i] = 3 #neither
}
}
# name the levels of direction_choice_conserv
D$direction_choice_conserv = revalue(x = as.factor(D$direction_choice_conserv),
c("0" = "Both", "1"="Order Consistent",
"2" = "Inverse", "3"= "Neither"))
# get the distribution of choices for the conservative coding of
# direction
table(D$model_type, D$direction_choice_conserv)
## create a control_choice_lib variable ##
D$control_choice_lib = rep(0, nrow(D))
for(i in 1:nrow(D)){
if(D$control_activity_ordered[i]>0.5 && D$control_activity_inverse[i]<0.5){
D$control_choice_lib[i] = 1 #order-consistent
}else if(D$control_activity_ordered[i]>0.5 && D$control_activity_inverse[i]>0.5){
D$control_choice_lib[i] = 0 #both
}else if(D$control_activity_ordered[i]<0.5 && D$control_activity_inverse[i]>0.5){
D$control_choice_lib[i] = 0 #chose inverse but not order_con
}else{
D$control_choice_lib[i] = 0 #neither
}
}
table(D$model_type, D$control_choice_lib)
# name the levels of control_choice_lib
D$control_choice_lib = revalue(x = as.factor(D$control_choice_lib),
c("0" = "Other", "1"="Order Consistent"))
table(D$model_type, D$control_choice_lib)
## create a control_choice_conserv variable ##
D$control_choice_conserv = rep(0, nrow(D))
for(i in 1:nrow(D)){
if(D$control_activity_ordered[i]>0.5 && D$control_activity_inverse[i]<0.5){
D$control_choice_conserv[i] = 1 #order-consistent
}else if(D$control_activity_ordered[i]>0.5 && D$control_activity_inverse[i]>0.5){
D$control_choice_conserv[i] = 0 #both
}else if(D$control_activity_ordered[i]<0.5 && D$control_activity_inverse[i]>0.5){
D$control_choice_conserv[i] = 2 #chose inverse but not order_con
}else{
D$control_choice_conserv[i] = 3 #neither
}
}
# name the levels of direction_choice_conserv
D$control_choice_conserv = revalue(x = as.factor(D$control_choice_conserv),
c("0" = "Both", "1"="Order Consistent",
"3"= "Neither"))
# get distributional data
table(D$model_type, D$control_choice_conserv)
# name the levels of direction_choice_conserv
D$control_choice_conserv = revalue(x = as.factor(D$control_choice_conserv),
c("0" = "Both", "1"="Order Consistent",
"2" = "Inverse Only", "3" = "Neither"))
# get distributional data
table(D$model_type, D$control_choice_conserv)
#####################################
# preliminary analyses and plotting #
#####################################
D$model_type = as.factor(D$model_type)
D$model_type = ordered(D$model_type, levels = c("no_inverse", "weak_inverse", "split", "strong_inverse"))
levels(D$model_type)
# get distribution of successes and failure
# test_choice
table(D$test_choice)
# get distribution of successes and failure
# test_choice
table(D$model_type, D$test_choice)
# get distribution of successes and failure for each model
# test_choice
table(D$model_type, D$test_choice)
noInverse_test_sucess_prob = table(D$test_choice[D$model_type=="no_inverse"])[[1]]/(table(D$test_choice[D$model_type=="no_inverse"])[[1]]+table(D$test_choice[D$model_type=="no_inverse"])[[2]])
noInverse_test_sucess_prob
noInverse_test_success_odds = noInverse_test_sucess_prob/(1-noInverse_test_sucess_prob) # this is what will be shown
noInverse_test_success_odds
# get distribution of successes and failure for each model
# test_choice
table(D$model_type, D$test_choice)
# get distribution of successes and failure for each model
# test_choice
table(D$test_choice[D$model_type=="no_inverse"])
# direction_choice
table(D$direction_choice_lib[D$model_type=="no_inverse"])
baseline_direction_ordered_lib_prob = table(D$direction_choice_lib[D$model_type=="no_inverse"])[[2]]/(table(D$direction_choice_lib[D$model_type=="no_inverse"])[[1]]+table(D$direction_choice_lib[D$model_type=="no_inverse"])[[2]])
noInverse_direction_ordered_lib_prob = table(D$direction_choice_lib[D$model_type=="no_inverse"])[[2]]/(table(D$direction_choice_lib[D$model_type=="no_inverse"])[[1]]+table(D$direction_choice_lib[D$model_type=="no_inverse"])[[2]])
noInverse_direction_ordered_lib_prob
noInverse_direction_ordered_lib_odds = noInverse_direction_ordered_lib_prob/(1-noInverse_direction_ordered_lib_prob) # this is what will be shown
noInverse_direction_ordered_lib_odds
table(D$direction_choice_conserv[D$model_type=="no_inverse"])
table(D$direction_choice_conserv[D$model_type=="no_inverse"])
noInverse_direction_ordered_conserv_prob = table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[1]]/(table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[1]]+
table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[2]]+
table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[3]]+
table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[4]])
noInverse_direction_ordered_conserv_prob
noInverse_direction_ordered__conserv_odds = noInverse_direction_ordered_conserv_prob/(1-noInverse_direction_ordered_conserv_prob) # this is what will be shown
noInverse_direction_ordered__conserv_odds
table(D$direction_choice_conserv[D$model_type=="no_inverse"])
# direction_choice
table(D$direction_choice_lib[D$model_type=="no_inverse"])
table(D$direction_choice_conserv[D$model_type=="no_inverse"])
noInverse_direction_ordered_conserv_prob = table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[2]]/(table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[1]]+
table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[2]]+
table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[3]]+
table(D$direction_choice_conserv[D$model_type=="no_inverse"])[[4]])
noInverse_direction_ordered_conserv_prob
noInverse_direction_ordered__conserv_odds = noInverse_direction_ordered_conserv_prob/(1-noInverse_direction_ordered_conserv_prob) # this is what will be shown
noInverse_direction_ordered__conserv_odds
table(D$direction_choice_conserv[D$model_type=="no_inverse"])
noInverse_direction_ordered_lib_odds
baseline_control_ordered_lib_odds
noInverse_direction_ordered_lib_odds
noInverse_direction_ordered__conserv_odds
# direction_choice
table(D$direction_choice_lib[D$model_type=="no_inverse"])
noInverse_direction_ordered_conserv_prob
table(D$direction_choice_conserv[D$model_type=="no_inverse"])
# control_choice
table(D$control_choice_lib[D$model_type=="no_inverse"])
noInverse_control_ordered_lib_prob = table(D$control_choice_lib[D$model_type=="no_inverse"])[[2]]/(table(D$control_choice_lib[D$model_type=="no_inverse"])[[1]]+table(D$control_choice_lib[D$model_type=="no_inverse"])[[2]])
noInverse_control_ordered_lib_prob
noInverse_control_ordered_lib_odds = noInverse_control_ordered_lib_prob/(1-noInverse_control_ordered_lib_prob) # this is what will be shown
noInverse_control_ordered_lib_odds
table(D$control_choice_conserv[D$model_type=="no_inverse"])
noInverse_control_ordered_conserv_prob = table(D$control_choice_conserv[D$model_type=="no_inverse"])[[2]]/(table(D$control_choice_conserv[D$model_type=="no_inverse"])[[1]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[2]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[3]])
noInverse_control_ordered_conserv_prob
noInverse_control_ordered_conserv_odds = noInverse_control_ordered_conserv_prob/(1-noInverse_control_ordered_conserv_prob) # this is what will be shown
noInverse_control_ordered_conserv_odds
table(D$control_choice_conserv[D$model_type=="no_inverse"])
noInverse_control_ordered_conserv_prob = table(D$control_choice_conserv[D$model_type=="no_inverse"])[[2]]/(table(D$control_choice_conserv[D$model_type=="no_inverse"])[[1]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[2]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[3]])
noInverse_control_ordered_conserv_prob
noInverse_control_ordered_conserv_odds = noInverse_control_ordered_conserv_prob/(1-noInverse_control_ordered_conserv_prob) # this is what will be shown
noInverse_control_ordered_conserv_odds
noInverse_control_ordered_conserv_prob
table(D$control_choice_conserv[D$model_type=="no_inverse"])
table(D$control_choice_conserv[D$model_type=="no_inverse"])
noInverse_control_ordered_conserv_prob = table(D$control_choice_conserv[D$model_type=="no_inverse"])[[2]]/(table(D$control_choice_conserv[D$model_type=="no_inverse"])[[1]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[2]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[3]]+
table(D$control_choice_conserv[D$model_type=="no_inverse"])[[4]])
noInverse_control_ordered_conserv_prob
noInverse_control_ordered_conserv_odds = noInverse_control_ordered_conserv_prob/(1-noInverse_control_ordered_conserv_prob) # this is what will be shown
noInverse_control_ordered_conserv_odds
levels(D$model_type)
####################
### weak_inverse ###
####################
# test_choice
table(D$test_choice[D$model_type=="weak_inverse"])
weakInverse_test_sucess_prob = table(D$test_choice[D$model_type=="weak_inverse"])[[1]]/(table(D$test_choice[D$model_type=="weak_inverse"])[[1]]+table(D$test_choice[D$model_type=="weak_inverse"])[[2]])
weakInverse_test_sucess_prob
weakInverse_test_success_odds = weakInverse_test_sucess_prob/(1-weakInverse_test_sucess_prob) # this is what will be shown
weakInverse_test_success_odds
# direction_choice
table(D$direction_choice_lib[D$model_type=="weak_inverse"])
weakInverse_direction_ordered_lib_prob = table(D$direction_choice_lib[D$model_type=="weak_inverse"])[[2]]/(table(D$direction_choice_lib[D$model_type=="weak_inverse"])[[1]]+table(D$direction_choice_lib[D$model_type=="weak_inverse"])[[2]])
weakInverse_direction_ordered_lib_prob
weakInverse_direction_ordered_lib_odds = weakInverse_direction_ordered_lib_prob/(1-weakInverse_direction_ordered_lib_prob) # this is what will be shown
weakInverse_direction_ordered_lib_odds
table(D$direction_choice_conserv[D$model_type=="weak_inverse"])
weakInverse_direction_ordered_conserv_prob = table(D$direction_choice_conserv[D$model_type=="weak_inverse"])[[2]]/(table(D$direction_choice_conserv[D$model_type=="weak_inverse"])[[1]]+
table(D$direction_choice_conserv[D$model_type=="weak_inverse"])[[2]]+
table(D$direction_choice_conserv[D$model_type=="weak_inverse"])[[3]]+
table(D$direction_choice_conserv[D$model_type=="weak_inverse"])[[4]])
weakInverse_direction_ordered_conserv_prob
weakInverse_direction_ordered__conserv_odds = weakInverse_direction_ordered_conserv_prob/(1-weakInverse_direction_ordered_conserv_prob) # this is what will be shown
weakInverse_direction_ordered__conserv_odds
# control_choice
table(D$control_choice_lib[D$model_type=="weak_inverse"])
weakInverse_control_ordered_lib_prob = table(D$control_choice_lib[D$model_type=="weak_inverse"])[[2]]/(table(D$control_choice_lib[D$model_type=="weak_inverse"])[[1]]+table(D$control_choice_lib[D$model_type=="weak_inverse"])[[2]])
weakInverse_control_ordered_lib_prob
weakInverse_control_ordered_lib_odds = weakInverse_control_ordered_lib_prob/(1-weakInverse_control_ordered_lib_prob) # this is what will be shown
weakInverse_control_ordered_lib_odds
table(D$control_choice_conserv[D$model_type=="weak_inverse"])
weakInverse_control_ordered_conserv_prob = table(D$control_choice_conserv[D$model_type=="weak_inverse"])[[2]]/(table(D$control_choice_conserv[D$model_type=="weak_inverse"])[[1]]+
table(D$control_choice_conserv[D$model_type=="weak_inverse"])[[2]]+
table(D$control_choice_conserv[D$model_type=="weak_inverse"])[[3]]+
table(D$control_choice_conserv[D$model_type=="weak_inverse"])[[4]])
weakInverse_control_ordered_conserv_prob
weakInverse_control_ordered_conserv_odds = weakInverse_control_ordered_conserv_prob/(1-weakInverse_control_ordered_conserv_prob) # this is what will be shown
weakInverse_control_ordered_conserv_odds
# no inverse Model #
# test_choice
glm.fit.soc_ni = glm(test_choice[D$model_type=="no_inverse"]~1,
data = D,
family = "binomial")
summary(glm.fit.soc_ni)
# no inverse Model #
# test_choice
glm.fit.soc_ni = glm(test_choice[D$model_type=="no_inverse"]~1,
data = D,
family = "binomial")
D$test_choice[D$model_type=="no_inverse"
]
table(test_choice[D$model_type=="no_inverse"])
table(D$test_choice[D$model_type=="no_inverse"])
# create a test_choice variable
D$test_choice = rep(0,nrow(D))
for(i in 1:nrow(D)){
if(D$test_activity_correct[i]>0.5 && D$test_activity_incorrect[i]<0.5){
D$test_choice[i] = 1
}else{
D$test_choice[i] = 0
}
}
# no inverse Model #
# test_choice
glm.fit.soc_ni = glm(test_choice[D$model_type=="no_inverse"]~1,
data = D,
family = "binomial")
summary(glm.fit.soc_ni)
table(D$test_choice[D$model_type=="no_inverse"]\)
table(D$test_choice[D$model_type=="no_inverse"])
exp(glm.fit.soc_ni$coefficients)
# Figure
noInverse_test_choice_barplot = ggplot(D, aes(test_choice[D$model_type=="no_inverse"], fill = test_choice[D$model_type=="no_inverse"]))
noInverse_test_choice_barplot + geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
noInverse_test_choice_barplot = ggplot(D, aes(test_choice[model_type=="no_inverse"], fill = test_choice[model_type=="no_inverse"]))
noInverse_test_choice_barplot + geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
noInverse_test_choice_barplot = ggplot(D, aes(test_choice[model_type=="no_inverse"], fill = test_choice))
noInverse_test_choice_barplot + geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
noInverse_test_choice_barplot = ggplot(D, aes(test_choice, fill = test_choice))
noInverse_test_choice_barplot + geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
test_choice_barplot = ggplot(D, aes(test_choice, fill = test_choice))
# Figure
test_choice_barplot = ggplot(D, aes(test_choice, fill = test_choice))
test_choice_barplot + geom_bar(data=D[D$model_type=="no_inverse"],position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
test_choice_barplot + geom_bar(data=D[D$model_type=="no_inverse",],position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# direction
glm.fit.dir_ni = glm(direction_choice[D$model_type=="no_inverse"]~1,
data = D,
family = "binomial")
test_choice_barplot + geom_bar(data=D[D$model_type=="no_inverse",],position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
test_choice_barplot = ggplot(D, aes(test_choice, fill = test_choice))
test_choice_barplot + geom_bar(data=D[D$model_type=="no_inverse",],position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
test_choice_barplot +
geom_bar(data=D[D$model_type=="no_inverse",], position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
test_choice_barplot +
geom_bar(data=D[D$model_type=="no_inverse",], position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
noInverse_test_choice_barplot = ggplot(D[D$model_type=="no_inverse",], aes(test_choice, fill = test_choice))
noInverse_test_choice_barplot +
geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# Figure
noInverse_test_choice_barplot = ggplot(D[D$model_type=="no_inverse",], aes(test_choice, fill = test_choice))
noInverse_test_choice_barplot +
geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
# direction liberal
glm.fit.dir_ni = glm(direction_choice_lib[D$model_type=="no_inverse"]~1,
data = D, family = "binomial")
summary(glm.fit.dir_ni)
# liberal figure
noInverse_direction_choice_liberal_barplot = ggplot(D[D$model_type=="no_inverse",], aes(direction_choice_lib, fill = direction_choice_lib))
noInverse_direction_choice_liberal_barplot + geom_bar(position="dodge") +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 30)) +
scale_fill_manual(values=c("black","#ffc857")) +
theme_bw()
## conservative analyses ##
noInverse_multinom_direction_choice = multinom(direction_choice_conserv[D$model_type=="no_inverse"] ~ 1, data = D)
library(nnet)
## conservative analyses ##
noInverse_multinom_direction_choice = multinom(direction_choice_conserv[D$model_type=="no_inverse"] ~ 1, data = D)
summary(noInverse_multinom_direction_choice)
noInverse_multinom_direction_choice_z <- summary(noInverse_multinom_direction_choice)$coefficients/summary(noInverse_multinom_direction_choice)$standard.errors
noInverse_multinom_direction_choice_z
noInverse_multinom_direction_choice_p <- (1 - pnorm(abs(noInverse_multinom_direction_choice_z), 0, 1)) * 2
noInverse_multinom_direction_choice_p
levels(D$direction_choice_conserv[D$model_type=="no_inverse"])
table((D$direction_choice_conserv[D$model_type=="no_inverse"]))
